#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// --- Estrutura básica de nó para listas encadeadas ---
typedef struct No {
    int valor;
    struct No *prox;
} No;

// --- Exercício 1: Inserção Básica ---
void inserir_inicio(No **lista, int valor) {
    No *novo = (No *)malloc(sizeof(No));
    novo->valor = valor;
    novo->prox = *lista;
    *lista = novo;
}

void inserir_fim(No **lista, int valor) {
    No *novo = (No *)malloc(sizeof(No));
    novo->valor = valor;
    novo->prox = NULL;

    if (*lista == NULL) {
        *lista = novo;
    } else {
        No *atual = *lista;
        while (atual->prox != NULL)
            atual = atual->prox;
        atual->prox = novo;
    }
}

// --- Exercício 2: Contagem de Nós ---
int contar_nos(No *lista) {
    int count = 0;
    No *atual = lista;
    while (atual != NULL) {
        count++;
        atual = atual->prox;
    }
    return count;
}

// --- Exercício 3: Busca de Elemento ---
int buscar_elemento(No *lista, int valor) {
    No *atual = lista;
    while (atual != NULL) {
        if (atual->valor == valor) return 1;
        atual = atual->prox;
    }
    return 0;
}

// --- Exercício 4: Inserção em Posição Específica ---
void inserir_posicao(No **lista, int valor, int pos) {
    if (pos == 0) {
        inserir_inicio(lista, valor);
        return;
    }
    No *atual = *lista;
    for (int i = 0; i < pos - 1 && atual != NULL; i++)
        atual = atual->prox;

    if (atual == NULL) {
        printf("Posição inválida\n");
        return;
    }

    No *novo = (No *)malloc(sizeof(No));
    novo->valor = valor;
    novo->prox = atual->prox;
    atual->prox = novo;
}

// --- Exercício 5: Remoção por Valor (primeira ocorrência) ---
void remover_valor(No **lista, int valor) {
    No *atual = *lista, *ant = NULL;
    while (atual != NULL && atual->valor != valor) {
        ant = atual;
        atual = atual->prox;
    }
    if (atual == NULL) return; // não encontrado
    if (ant == NULL) {
        *lista = atual->prox;
    } else {
        ant->prox = atual->prox;
    }
    free(atual);
}

// --- Exercício 6: Inversão Iterativa ---
void inverter_lista(No **lista) {
    No *prev = NULL, *atual = *lista, *prox = NULL;
    while (atual != NULL) {
        prox = atual->prox;
        atual->prox = prev;
        prev = atual;
        atual = prox;
    }
    *lista = prev;
}

// --- Exercício 7: Nó do Meio (ponteiro rápido e lento) ---
No* encontrar_meio(No *lista) {
    if (lista == NULL) return NULL;
    No *slow = lista, *fast = lista;
    while (fast != NULL && fast->prox != NULL) {
        slow = slow->prox;
        fast = fast->prox->prox;
    }
    return slow;
}

// --- Exercício 8: Impressão Reversa com Pilha ---
typedef struct Pilha {
    int *dados;
    int topo;
    int capacidade;
} Pilha8;

Pilha8* criar_pilha(int capacidade) {
    Pilha8 *p = (Pilha8 *)malloc(sizeof(Pilha8));
    p->dados = (int *)malloc(capacidade * sizeof(int));
    p->topo = -1;
    p->capacidade = capacidade;
    return p;
}

void push(Pilha8 *p, int valor) {
    if (p->topo < p->capacidade - 1) p->dados[++(p->topo)] = valor;
}

int pop(Pilha8 *p) {
    if (p->topo == -1) return -1; // vazio
    return p->dados[(p->topo)--];
}

int esta_vazia(Pilha8 *p) {
    return p->topo == -1;
}

void imprimir_reverso_com_pilha(No *lista) {
    int n = contar_nos(lista);
    Pilha8 *pilha = criar_pilha(n);
    No *atual = lista;
    while (atual != NULL) {
        push(pilha, atual->valor);
        atual = atual->prox;
    }
    while (!esta_vazia(pilha)) {
        printf("%d ", pop(pilha));
    }
    printf("\n");
    free(pilha->dados);
    free(pilha);
}

// --- Exercício 9: Pilha com Array ---
#define TAM_PILHA 100
typedef struct Pilha9 {
    int dados[TAM_PILHA];
    int topo;
} Pilha9;

void iniciar_pilha(Pilha9 *p) { p->topo = -1; }
int push9(Pilha9 *p, int valor) {
    if (p->topo == TAM_PILHA - 1) return 0;
    p->dados[++(p->topo)] = valor;
    return 1;
}
int pop9(Pilha9 *p) {
    if (p->topo == -1) return -1;
    return p->dados[(p->topo)--];
}
int topo9(Pilha9 *p) {
    if (p->topo == -1) return -1;
    return p->dados[p->topo];
}
int esta_vazia9(Pilha9 *p) {
    return p->topo == -1;
}

// --- Exercício 10: Pilha com Lista Encadeada ---
typedef struct NoPilha {
    int valor;
    struct NoPilha *prox;
} NoPilha;

typedef struct Pilha10 {
    NoPilha *topo;
} Pilha10;

void iniciar_pilha10(Pilha10 *p) { p->topo = NULL; }
void push10(Pilha10 *p, int valor) {
    NoPilha *novo = (NoPilha *)malloc(sizeof(NoPilha));
    novo->valor = valor;
    novo->prox = p->topo;
    p->topo = novo;
}
int pop10(Pilha10 *p) {
    if (p->topo == NULL) return -1;
    int val = p->topo->valor;
    NoPilha *tmp = p->topo;
    p->topo = p->topo->prox;
    free(tmp);
    return val;
}
int topo10(Pilha10 *p) {
    if (p->topo == NULL) return -1;
    return p->topo->valor;
}
int esta_vazia10(Pilha10 *p) {
    return p->topo == NULL;
}

// --- Exercício 11: Verificação de Parênteses Balanceados ---
int verificar_balanceamento(const char *str) {
    Pilha9 p;
    iniciar_pilha(&p);
    for (int i = 0; str[i] != '\0'; i++) {
        char c = str[i];
        if (c == '(' || c == '{' || c == '[') {
            if (!push9(&p, c)) return 0;
        } else if (c == ')' || c == '}' || c == ']') {
            if (esta_vazia9(&p)) return 0;
            char topo = topo9(&p);
            if ((c == ')' && topo != '(') ||
                (c == '}' && topo != '{') ||
                (c == ']' && topo != '['))
                return 0;
            pop9(&p);
        }
    }
    return esta_vazia9(&p);
}

// --- Exercício 12: Inversão de String usando Pilha ---
void inverter_string(char *str) {
    int n = strlen(str);
    Pilha9 p;
    iniciar_pilha(&p);
    for (int i = 0; i < n; i++) push9(&p, str[i]);
    for (int i = 0; i < n; i++) str[i] = pop9(&p);
}

// --- Exercício 13: Verificação de Palíndromo com Pilha ---
int eh_palindromo(const char *str) {
    int n = strlen(str);
    Pilha9 p;
    iniciar_pilha(&p);
    for (int i = 0; i < n / 2; i++) {
        push9(&p, str[i]);
    }
    int inicio = (n % 2 == 0) ? n / 2 : n / 2 + 1;
    for (int i = inicio; i < n; i++) {
        if (esta_vazia9(&p) || pop9(&p) != str[i])
            return 0;
    }
    return 1;
}

// --- Exercício 14: Ordenação de Pilha usando outra pilha ---
void ordenar_pilha(Pilha9 *p) {
    Pilha9 aux;
    iniciar_pilha(&aux);
    while (!esta_vazia9(p)) {
        int tmp = pop9(p);
        while (!esta_vazia9(&aux) && topo9(&aux) > tmp) {
            push9(p, pop9(&aux));
        }
        push9(&aux, tmp);
    }
    // Transferir de volta para p
    while (!esta_vazia9(&aux)) {
        push9(p, pop9(&aux));
    }
}

// --- Exercício 15: Fila com Array Circular ---
#define TAM_FILA 100
typedef struct Fila {
    int dados[TAM_FILA];
    int frente, tras, tamanho;
} Fila;

void iniciar_fila(Fila *f) {
    f->frente = 0;
    f->tras = -1;
    f->tamanho = 0;
}
int enfileirar(Fila *f, int valor) {
    if (f->tamanho == TAM_FILA) return 0; // cheia
    f->tras = (f->tras + 1) % TAM_FILA;
    f->dados[f->tras] = valor;
    f->tamanho++;
    return 1;
}
int desenfileirar(Fila *f) {
    if (f->tamanho == 0) return -1; // vazia
    int val = f->dados[f->frente];
    f->frente = (f->frente + 1) % TAM_FILA;
    f->tamanho--;
    return val;
}
int frente(Fila *f) {
    if (f->tamanho == 0) return -1;
    return f->dados[f->frente];
}

// --- Exercício 16: Fila com Lista Encadeada ---
typedef struct NoFila {
    int valor;
    struct NoFila *prox;
} NoFila;

typedef struct FilaLista {
    NoFila *inicio;
    NoFila *fim;
} FilaLista;

void iniciar_fila_lista(FilaLista *f) {
    f->inicio = NULL;
    f->fim = NULL;
}
void enfileirar_lista(FilaLista *f, int valor) {
    NoFila *novo = (NoFila *)malloc(sizeof(NoFila));
    novo->valor = valor;
    novo->prox = NULL;
    if (f->fim == NULL) {
        f->inicio = novo;
        f->fim = novo;
    } else {
        f->fim->prox = novo;
        f->fim = novo;
    }
}
int desenfileirar_lista(FilaLista *f) {
    if (f->inicio == NULL) return -1;
    int val = f->inicio->valor;
    NoFila *tmp = f->inicio;
    f->inicio = f->inicio->prox;
    if (f->inicio == NULL) f->fim = NULL;
    free(tmp);
    return val;
}
int frente_lista(FilaLista *f) {
    if (f->inicio == NULL) return -1;
    return f->inicio->valor;
}

// --- Exercício 17: Geração de Números Binários usando Fila ---
void gerar_binarios(int n) {
    FilaLista fila;
    iniciar_fila_lista(&fila);
    enfileirar_lista(&fila, 1);

    for (int i = 0; i < n; i++) {
        int val = desenfileirar_lista(&fila);
        printf("%d ", val);
        enfileirar_lista(&fila, val * 10);
        enfileirar_lista(&fila, val * 10 + 1);
    }
    printf("\n");
}

// --- Exercício 18: Inversão dos Primeiros K Elementos da Fila usando Pilha ---
void inverter_primeiros_k(Fila *f, int k) {
    if (k > f->tamanho || k <= 0) return;

    Pilha9 p;
    iniciar_pilha(&p);

    // Retira os primeiros k elementos e empilha
    for (int i = 0; i < k; i++) {
        push9(&p, desenfileirar(f));
    }
    // Enfileira os elementos da pilha (invertidos)
    while (!esta_vazia9(&p)) {
        enfileirar(f, pop9(&p));
    }
    // Move os elementos restantes para o fim da fila para manter a ordem
    int tamanho_restante = f->tamanho - k;
    for (int i = 0; i < tamanho_restante; i++) {
        enfileirar(f, desenfileirar(f));
    }
}

// --- Exercício 19: Detecção de Ciclo (Algoritmo de Floyd) ---
int detectar_ciclo(No *lista) {
    No *slow = lista, *fast = lista;
    while (fast != NULL && fast->prox != NULL) {
        slow = slow->prox;
        fast = fast->prox->prox;
        if (slow == fast) return 1;
    }
    return 0;
}

// --- Exercício 20: União de Listas Ordenadas ---
No* unir_listas_ordenadas(No *l1, No *l2) {
    No dummy;
    No *tail = &dummy;
    dummy.prox = NULL;

    while (l1 != NULL && l2 != NULL) {
        if (l1->valor < l2->valor) {
            tail->prox = l1;
            l1 = l1->prox;
        } else {
            tail->prox = l2;
            l2 = l2->prox;
        }
        tail = tail->prox;
    }
    tail->prox = (l1 != NULL) ? l1 : l2;
    return dummy.prox;
}

// --- Exercício 21: Remoção de Todas as Ocorrências ---
void remover_todas_ocorrencias(No **lista, int valor) {
    while (*lista != NULL && (*lista)->valor == valor) {
        No *tmp = *lista;
        *lista = (*lista)->prox;
        free(tmp);
    }
    No *atual = *lista;
    while (atual != NULL && atual->prox != NULL) {
        if (atual->prox->valor == valor) {
            No *tmp = atual->prox;
            atual->prox = tmp->prox;
            free(tmp);
        } else {
            atual = atual->prox;
        }
    }
}

// --- Exercício 22: Intersecção de Listas ---
No* encontrar_intersecao(No *l1, No *l2) {
    int len1 = contar_nos(l1);
    int len2 = contar_nos(l2);

    // Ajustar ponto de início para alinhar
    while (len1 > len2) {
        l1 = l1->prox;
        len1--;
    }
    while (len2 > len1) {
        l2 = l2->prox;
        len2--;
    }
    while (l1 != NULL && l2 != NULL) {
        if (l1 == l2) return l1;
        l1 = l1->prox;
        l2 = l2->prox;
    }
    return NULL;
}

// --- Exercício 23: Rotação de Lista em K posições ---
void rotacionar_lista(No **lista, int k) {
    if (*lista == NULL || k == 0) return;

    int len = contar_nos(*lista);
    k = k % len;
    if (k == 0) return;

    No *atual = *lista;
    for (int i = 1; i < len - k; i++) {
        atual = atual->prox;
    }
    No *novo_inicio = atual->prox;
    atual->prox = NULL;

    No *fim = novo_inicio;
    while (fim->prox != NULL) fim = fim->prox;

    fim->prox = *lista;
    *lista = novo_inicio;
}

// --- Exercício 24: Pilha com mínimo em O(1) ---
typedef struct NoMin {
    int valor;
    int minimo_ate_agora;
    struct NoMin *prox;
} NoMin;

typedef struct PilhaMin {
    NoMin *topo;
} PilhaMin;

void iniciar_pilha_min(PilhaMin *p) {
    p->topo = NULL;
}

void push_min(PilhaMin *p, int valor) {
    NoMin *novo = (NoMin *)malloc(sizeof(NoMin));
    novo->valor = valor;
    if (p->topo == NULL)
        novo->minimo_ate_agora = valor;
    else
        novo->minimo_ate_agora = (valor < p->topo->minimo_ate_agora) ? valor : p->topo->minimo_ate_agora;
    novo->prox = p->topo;
    p->topo = novo;
}

int pop_min(PilhaMin *p) {
    if (p->topo == NULL) return -1;
    int val = p->topo->valor;
    NoMin *tmp = p->topo;
    p->topo = p->topo->prox;
    free(tmp);
    return val;
}

int topo_min(PilhaMin *p) {
    if (p->topo == NULL) return -1;
    return p->topo->valor;
}

int obter_minimo(PilhaMin *p) {
    if (p->topo == NULL) return -1;
    return p->topo->minimo_ate_agora;
}

// --- Exercício 25: Remover Duplicados em Lista Ordenada ---
void remover_duplicados(No *lista) {
    No *atual = lista;
    while (atual != NULL && atual->prox != NULL) {
        if (atual->valor == atual->prox->valor) {
            No *tmp = atual->prox;
            atual->prox = tmp->prox;
            free(tmp);
        } else {
            atual = atual->prox;
        }
    }
}

// --- Exercício 26: Detectar Palíndromo em Lista Encadeada ---
int eh_palindromo_lista(No *lista) {
    // Passo 1: Encontrar meio da lista
    No *slow = lista, *fast = lista;
    while (fast != NULL && fast->prox != NULL) {
        slow = slow->prox;
        fast = fast->prox->prox;
    }
    // Passo 2: Inverter segunda metade da lista
    No *prev = NULL, *atual = slow, *prox;
    while (atual != NULL) {
        prox = atual->prox;
        atual->prox = prev;
        prev = atual;
        atual = prox;
    }
    // Passo 3: Comparar as duas metades
    No *p1 = lista;
    No *p2 = prev;
    int resultado = 1;
    while (p2 != NULL) {
        if (p1->valor != p2->valor) {
            resultado = 0;
            break;
        }
        p1 = p1->prox;
        p2 = p2->prox;
    }
    // Passo 4: Reverter novamente segunda metade para restaurar lista (opcional)
    atual = prev; prev = NULL;
    while (atual != NULL) {
        prox = atual->prox;
        atual->prox = prev;
        prev = atual;
        atual = prox;
    }
    return resultado;
}

// --- Exercício 27: Encontrar K-ésimo Elemento do Fim ---
int kth_do_fim(No *lista, int k) {
    No *fast = lista;
    No *slow = lista;
    for (int i = 0; i < k; i++) {
        if (fast == NULL) return -1; // k maior que o tamanho
        fast = fast->prox;
    }
    while (fast != NULL) {
        slow = slow->prox;
        fast = fast->prox;
    }
    return (slow != NULL) ? slow->valor : -1;
}

// --- Exercício 28: Merge Sort em Lista Encadeada ---
No* merge_sorted_lists(No *l1, No *l2) {
    if (l1 == NULL) return l2;
    if (l2 == NULL) return l1;
    if (l1->valor < l2->valor) {
        l1->prox = merge_sorted_lists(l1->prox, l2);
        return l1;
    } else {
        l2->prox = merge_sorted_lists(l1, l2->prox);
        return l2;
    }
}

void dividir_lista(No *origem, No **frente, No **tras) {
    No *rapido;
    No *lento;
    lento = origem;
    rapido = origem->prox;
    while (rapido != NULL) {
        rapido = rapido->prox;
        if (rapido != NULL) {
            lento = lento->prox;
            rapido = rapido->prox;
        }
    }
    *frente = origem;
    *tras = lento->prox;
    lento->prox = NULL;
}

void merge_sort(No **lista) {
    if (*lista == NULL || (*lista)->prox == NULL) return;
    No *frente;
    No *tras;
    dividir_lista(*lista, &frente, &tras);
    merge_sort(&frente);
    merge_sort(&tras);
    *lista = merge_sorted_lists(frente, tras);
}

// --- Exercício 29: Verificar se Lista é Circular ---
int eh_circular(No *lista) {
    if (lista == NULL) return 0;
    No *atual = lista->prox;
    while (atual != NULL && atual != lista) {
        atual = atual->prox;
    }
    return (atual == lista);
}

// --- Exercício 30: Remover Nós com Valores Maiores que um dado Valor ---
void remover_maiores_que(No **lista, int limite) {
    while (*lista != NULL && (*lista)->valor > limite) {
        No *tmp = *lista;
        *lista = (*lista)->prox;
        free(tmp);
    }
    No *atual = *lista;
    while (atual != NULL && atual->prox != NULL) {
        if (atual->prox->valor > limite) {
            No *tmp = atual->prox;
            atual->prox = tmp->prox;
            free(tmp);
        } else {
            atual = atual->prox;
        }
    }
}
